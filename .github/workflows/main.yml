on: push
jobs:
  deploy:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql
        env:
          MYSQL_DATABASE: test
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
        ports:
        - 3306:3306
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
        - 5432:5432
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v3
      with:
        python-version: '3.6'
    - name: Setup databases
      run: |
        pip install .
        pip install mysqlclient psycopg2-binary

    - name: Run tests
      run: python tests/sql.py
      env:
        MYSQL_HOST: 127.0.0.1
        POSTGRESQL_HOST: 127.0.0.1

    - name: Install pypa/build
      run: python -m pip install build --user

    - name: Build a binary wheel and a source tarball
      run: python -m build --sdist --wheel --outdir dist/ .

    - name: Deploy to PyPI
      if: ${{ github.ref == 'refs/heads/main' }}
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}

    - name: Get Version
      id: py_version
      run: |
        echo ::set-output name=version::$(python3 setup.py --version)

    - name: Create Tag
      uses: actions/github-script@v6
      with:
        github-token: ${{ github.token }}
        script: |
          try {
            await github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "tags/v${{ steps.py_version.outputs.version }}",
              sha: context.sha,
              force: true
            })
          } catch (e) {
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: "refs/tags/v${{ steps.py_version.outputs.version }}",
              sha: context.sha
            })
          }

    - name: Create Release
      run: |
        curl \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${{ secrets.GH_RELEASE_TOKEN }}" \
          https://api.github.com/repos/${GITHUB_REPOSITORY}/releases \
          -d '{"tag_name":"v${{ steps.py_version.outputs.version }}","target_commitish":"${{ github.sha }}","name":"v${{ steps.py_version.outputs.version }}","body":"${{ github.event.head_commit.message }}","draft":false,"prerelease":false,"generate_release_notes":false}'
